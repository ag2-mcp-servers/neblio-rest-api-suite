# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:10:48+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBasic
from fastapi import Query

from models import (
    BroadcastTxRequest,
    BroadcastTxResponse,
    BurnTokenRequest,
    BurnTokenResponse,
    Error,
    GetAddressBalanceResponse,
    GetAddressInfoResponse,
    GetAddressResponse,
    GetAddressTotalReceivedResponse,
    GetAddressTotalSentResponse,
    GetAddressUnconfirmedBalanceResponse,
    GetAddressUtxosResponse,
    GetBlockIndexResponse,
    GetBlockResponse,
    GetFaucetResponse,
    GetRawTxResponse,
    GetStatusResponse,
    GetSyncResponse,
    GetTokenHoldersResponse,
    GetTokenIdResponse,
    GetTokenMetadataResponse,
    GetTransactionInfoResponse,
    GetTxResponse,
    GetTxsResponse,
    IssueTokenRequest,
    IssueTokenResponse,
    RpcRequest,
    RpcResponse,
    SendTokenRequest,
    SendTokenResponse,
    SendTxRequest,
)

app = MCPProxy(
    contact={'x-twitter': 'NeblioTeam'},
    description='APIs for Interacting with NTP1 Tokens & The Neblio Blockchain',
    title='Neblio REST API Suite',
    version='1.3.0',
    servers=[{'url': 'https://ntp1node.nebl.io/'}],
)


@app.post(
    '/#-datamodel-code-generator-#-root-#-special-#',
    description=""" Call any Neblio RPC command from the Neblio API libraries. Useful for signing transactions with a local node and other functions. Will not work from a browser due to CORS restrictions. Requires a node to be running locally at 127.0.0.1 """,
    tags=['rpc_operations'],
    security=[
        HTTPBasic(name="None"),
    ],
)
def json_rpc(body: RpcRequest):
    """
    Send a JSON-RPC call to a localhost neblio-Qt or nebliod node
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/addr/{address}',
    description=""" Returns NEBL address object containing information on a specific address """,
    tags=['address_management', 'address_interaction'],
)
def get_address(address: str):
    """
    Returns address object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/addr/{address}/balance',
    description=""" Returns NEBL address balance in satoshis """,
    tags=['address_management', 'address_interaction'],
)
def get_address_balance(address: str):
    """
    Returns address balance in sats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/addr/{address}/totalReceived',
    description=""" Returns total NEBL received by address in satoshis """,
    tags=['address_management', 'address_interaction'],
)
def get_address_total_received(address: str):
    """
    Returns total received by address in sats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/addr/{address}/totalSent',
    description=""" Returns total NEBL sent by address in satoshis """,
    tags=['address_management', 'address_interaction'],
)
def get_address_total_sent(address: str):
    """
    Returns total sent by address in sats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/addr/{address}/unconfirmedBalance',
    description=""" Returns NEBL address unconfirmed balance in satoshis """,
    tags=['address_management', 'address_interaction'],
)
def get_address_unconfirmed_balance(address: str):
    """
    Returns address unconfirmed balance in sats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/addr/{address}/utxo',
    description=""" Returns information on each Unspent Transaction Output contained at an address """,
    tags=['address_management', 'address_interaction'],
)
def get_address_utxos(address: str):
    """
    Returns all UTXOs at a given address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/block-index/{blockindex}',
    description=""" Returns the block hash of a block at a given block index """,
    tags=['block_information_retrieval'],
)
def get_block_index(blockindex: float):
    """
    Returns block hash of block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/block/{blockhash}',
    description=""" Returns blockchain data for a given block based upon the block hash """,
    tags=['block_information_retrieval', 'rpc_operations'],
)
def get_block(blockhash: str):
    """
    Returns information regarding a Neblio block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/rawtx/{txid}',
    description=""" Returns raw transaction hex representing a NEBL transaction """,
    tags=['rpc_operations', 'transaction_handling'],
)
def get_raw_tx(txid: str):
    """
    Returns raw transaction hex
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/status',
    description=""" Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash """,
    tags=['rpc_operations', 'node_health_monitoring'],
)
def get_status(q: Optional[str] = None):
    """
    Utility API for calling several blockchain node functions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/sync',
    description=""" Returns information on the node's sync progress """,
    tags=['node_health_monitoring', 'rpc_operations'],
)
def get_sync():
    """
    Get node sync status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ins/tx/send',
    description=""" Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.
 """,
    tags=['rpc_operations', 'transaction_handling'],
)
def send_tx(body: SendTxRequest):
    """
    Broadcasts a signed raw transaction to the network (not NTP1 specific)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/tx/{txid}',
    description=""" Returns NEBL transaction object representing a NEBL transaction """,
    tags=['rpc_operations', 'transaction_handling'],
)
def get_tx(txid: str):
    """
    Returns transaction object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ins/txs',
    description=""" Returns all transactions by block or address """,
    tags=['transaction_handling', 'address_management', 'block_information_retrieval'],
)
def get_txs(
    address: Optional[str] = None,
    block: Optional[str] = None,
    page_num: Optional[float] = Query(None, alias='pageNum'),
):
    """
    Get transactions by block or address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ntp1/addressinfo/{address}',
    description=""" Returns both NEBL and NTP1 token UTXOs held at the given address.
 """,
    tags=['address_management', 'address_interaction'],
)
def get_address_info(address: str):
    """
    Information On a Neblio Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ntp1/broadcast',
    description=""" Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.
 """,
    tags=['rpc_operations', 'transaction_handling'],
)
def broadcast_tx(body: BroadcastTxRequest):
    """
    Broadcasts a signed raw transaction to the network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ntp1/burntoken',
    description=""" Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain.
 """,
    tags=['transaction_handling', 'token_operations'],
)
def burn_token(body: BurnTokenRequest):
    """
    Builds a transaction that burns an NTP1 Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ntp1/issue',
    description=""" Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain.
 """,
    tags=['token_operations', 'transaction_handling'],
)
def issue_token(body: IssueTokenRequest):
    """
    Builds a transaction that issues a new NTP1 Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/ntp1/sendtoken',
    description=""" Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain.
 """,
    tags=['transaction_handling', 'token_operations'],
)
def send_token(body: SendTokenRequest):
    """
    Builds a transaction that sends an NTP1 Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ntp1/stakeholders/{tokenid}',
    description=""" Returns the the the addresses holding a token and how many tokens are held
 """,
    tags=['address_management', 'token_operations', 'address_interaction'],
)
def get_token_holders(tokenid: str):
    """
    Get Addresses Holding a Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ntp1/tokenid/{tokensymbol}',
    description=""" Translates a token symbol to a tokenId if a token exists with that symbol on the network
 """,
    tags=['token_operations'],
)
def get_token_id(tokensymbol: str):
    """
    Returns the tokenId representing a token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ntp1/tokenmetadata/{tokenid}',
    description=""" Returns the metadata associated with a token.
 """,
    tags=['token_operations'],
)
def get_token_metadata(tokenid: str, verbosity: Optional[float] = None):
    """
    Get Metadata of Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ntp1/tokenmetadata/{tokenid}/{utxo}',
    description=""" Returns the metadata associated with a token for that specific utxo instead of the issuance transaction.
 """,
    tags=['rpc_operations', 'token_operations', 'address_interaction'],
)
def get_token_metadata_of_utxo(
    tokenid: str, utxo: str = ..., verbosity: Optional[float] = None
):
    """
    Get UTXO Metadata of Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/ntp1/transactioninfo/{txid}',
    description=""" Returns detailed information regarding an NTP1 transaction.
 """,
    tags=['rpc_operations', 'transaction_handling'],
)
def get_transaction_info(txid: str):
    """
    Information On an NTP1 Transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/faucet',
    description=""" Withdraw testnet NEBL to your Neblio Testnet address. By default amount is 1500000000 or 15 NEBL and has a max of 50 NEBL. Only 2 withdrawals allowed per 24 hour period.
 """,
    tags=['rpc_operations', 'testnet_specific_operations', 'transaction_handling'],
)
def testnet_get_faucet(address: str, amount: Optional[float] = None):
    """
    Withdraws testnet NEBL to the specified address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/addr/{address}',
    description=""" Returns NEBL address object containing information on a specific address """,
    tags=['address_management', 'address_interaction'],
)
def testnet_get_address(address: str):
    """
    Returns address object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/addr/{address}/balance',
    description=""" Returns NEBL address balance in satoshis """,
    tags=['address_management', 'address_interaction'],
)
def testnet_get_address_balance(address: str):
    """
    Returns address balance in sats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/addr/{address}/totalReceived',
    description=""" Returns total NEBL received by address in satoshis """,
    tags=['address_management', 'address_interaction'],
)
def testnet_get_address_total_received(address: str):
    """
    Returns total received by address in sats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/addr/{address}/totalSent',
    description=""" Returns total NEBL sent by address in satoshis """,
    tags=['address_management', 'address_interaction'],
)
def testnet_get_address_total_sent(address: str):
    """
    Returns total sent by address in sats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/addr/{address}/unconfirmedBalance',
    description=""" Returns NEBL address unconfirmed balance in satoshis """,
    tags=['address_management', 'address_interaction'],
)
def testnet_get_address_unconfirmed_balance(address: str):
    """
    Returns address unconfirmed balance in sats
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/addr/{address}/utxo',
    description=""" Returns information on each Unspent Transaction Output contained at an address """,
    tags=['address_management', 'address_interaction'],
)
def testnet_get_address_utxos(address: str):
    """
    Returns all UTXOs at a given address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/block-index/{blockindex}',
    description=""" Returns the block hash of a block at a given block index """,
    tags=['block_information_retrieval'],
)
def testnet_get_block_index(blockindex: float):
    """
    Returns block hash of block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/block/{blockhash}',
    description=""" Returns blockchain data for a given block based upon the block hash """,
    tags=['rpc_operations', 'block_information_retrieval'],
)
def testnet_get_block(blockhash: str):
    """
    Returns information regarding a Neblio block
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/rawtx/{txid}',
    description=""" Returns raw transaction hex representing a NEBL transaction """,
    tags=['rpc_operations', 'transaction_handling'],
)
def testnet_get_raw_tx(txid: str):
    """
    Returns raw transaction hex
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/status',
    description=""" Utility API for calling several blockchain node functions - getInfo, getDifficulty, getBestBlockHash, getLastBlockHash """,
    tags=['rpc_operations', 'node_health_monitoring'],
)
def testnet_get_status(q: Optional[str] = None):
    """
    Utility API for calling several blockchain node functions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/sync',
    description=""" Returns information on the node's sync progress """,
    tags=['node_health_monitoring', 'rpc_operations'],
)
def testnet_get_sync():
    """
    Get node sync status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/testnet/ins/tx/send',
    description=""" Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.
 """,
    tags=['rpc_operations', 'transaction_handling'],
)
def testnet_send_tx(body: SendTxRequest):
    """
    Broadcasts a signed raw transaction to the network (not NTP1 specific)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/tx/{txid}',
    description=""" Returns NEBL transaction object representing a NEBL transaction """,
    tags=['transaction_handling', 'rpc_operations'],
)
def testnet_get_tx(txid: str):
    """
    Returns transaction object
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ins/txs',
    description=""" Returns all transactions by block or address """,
    tags=[
        'rpc_operations',
        'address_management',
        'block_information_retrieval',
        'transaction_handling',
        'address_interaction',
    ],
)
def testnet_get_txs(
    address: Optional[str] = None,
    block: Optional[str] = None,
    page_num: Optional[float] = Query(None, alias='pageNum'),
):
    """
    Get transactions by block or address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ntp1/addressinfo/{address}',
    description=""" Returns both NEBL and NTP1 token UTXOs held at the given address.
 """,
    tags=['rpc_operations', 'address_management', 'address_interaction'],
)
def testnet_get_address_info(address: str):
    """
    Information On a Neblio Address
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/testnet/ntp1/broadcast',
    description=""" Broadcasts a signed raw transaction to the network. If successful returns the txid of the broadcast trasnaction.
 """,
    tags=['rpc_operations', 'transaction_handling'],
)
def testnet_broadcast_tx(body: BroadcastTxRequest):
    """
    Broadcasts a signed raw transaction to the network
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/testnet/ntp1/burntoken',
    description=""" Builds an unsigned raw transaction that burns an NTP1 token on the Neblio blockchain.
 """,
    tags=['token_operations', 'transaction_handling'],
)
def testnet_burn_token(body: BurnTokenRequest):
    """
    Builds a transaction that burns an NTP1 Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/testnet/ntp1/issue',
    description=""" Builds an unsigned raw transaction that issues a new NTP1 token on the Neblio blockchain.
 """,
    tags=['transaction_handling', 'token_operations'],
)
def testnet_issue_token(body: IssueTokenRequest):
    """
    Builds a transaction that issues a new NTP1 Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/testnet/ntp1/sendtoken',
    description=""" Builds an unsigned raw transaction that sends an NTP1 token on the Neblio blockchain.
 """,
    tags=['transaction_handling', 'token_operations'],
)
def testnet_send_token(body: SendTokenRequest):
    """
    Builds a transaction that sends an NTP1 Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ntp1/stakeholders/{tokenid}',
    description=""" Returns the the the addresses holding a token and how many tokens are held
 """,
    tags=['address_management', 'token_operations', 'address_interaction'],
)
def testnet_get_token_holders(tokenid: str):
    """
    Get Addresses Holding a Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ntp1/tokenid/{tokensymbol}',
    description=""" Translates a token symbol to a tokenId if a token exists with that symbol on the network
 """,
    tags=['token_operations'],
)
def testnet_get_token_id(tokensymbol: str):
    """
    Returns the tokenId representing a token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ntp1/tokenmetadata/{tokenid}',
    description=""" Returns the metadata associated with a token.
 """,
    tags=['token_operations'],
)
def testnet_get_token_metadata(tokenid: str, verbosity: Optional[float] = None):
    """
    Get Metadata of Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ntp1/tokenmetadata/{tokenid}/{utxo}',
    description=""" Returns the metadata associated with a token for that specific utxo instead of the issuance transaction.
 """,
    tags=[
        'rpc_operations',
        'token_operations',
        'transaction_handling',
        'address_interaction',
    ],
)
def testnet_get_token_metadata_of_utxo(
    tokenid: str, utxo: str = ..., verbosity: Optional[float] = None
):
    """
    Get UTXO Metadata of Token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/testnet/ntp1/transactioninfo/{txid}',
    description=""" Returns detailed information regarding an NTP1 transaction.
 """,
    tags=['rpc_operations', 'transaction_handling'],
)
def testnet_get_transaction_info(txid: str):
    """
    Information On an NTP1 Transaction
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
